class Solution {
    public void wallsAndGates(int[][] rooms) {
        Queue<int[]> gateIndexes = new LinkedList<>();
        
        for(int i = 0; i < rooms.length; i++) {
            for(int j = 0; j < rooms[0].length; j++) {
                if(rooms[i][j] == 0) {
                    gateIndexes.add(new int[] {i, j});
                }
            }
        }
        
        List<int[]> directions = Arrays.asList(new int[] {1,0}, new int[] {0,1}, new int[] {-1,0}, new int[] {0,-1});
        
        while(!gateIndexes.isEmpty()) {
            int[] gateIndex = gateIndexes.poll();
            
            int giRow = gateIndex[0];
            int giColumn = gateIndex[1];
            
            for(int[] dir : directions) {
                int nxtRow = giRow + dir[0];
                int nxtColumn = giColumn + dir[1];
                
                if(nxtRow < 0 || nxtRow >= rooms.length || nxtColumn < 0 || nxtColumn >= rooms[0].length || rooms[nxtRow][nxtColumn] != Integer.MAX_VALUE) {
                    continue;
                }
                
                rooms[nxtRow][nxtColumn] = rooms[giRow][giColumn] + 1;
                
                gateIndexes.add(new int[] {nxtRow, nxtColumn});
                
            }
        }
    }
}
