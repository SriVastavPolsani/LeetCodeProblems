//One pass O(n)
public class Solution {
    public int DominantIndex(int[] nums) {
        int max = -1;
        int second = -1;
        int dominantIndex = -1;
        
        for(int i = 0; i < nums.Length; i++)
        {
            if(nums[i] > max)
            {
                second = max;
                max = nums[i];
                dominantIndex = i;
            }
            else if(nums[i] > second)
            {
                second = nums[i];
            }
        }
        
        return 2*second <= max ? dominantIndex : -1;
    }
}

//Two pass O(n)
public class Solution {
    public int DominantIndex(int[] nums) {
        if(nums == null || nums.Length < 1)
            return -1;
        
        int maxValue = Int32.MinValue;
        int dominantIndex = -1;
        
        for(int i = 0; i < nums.Length; i++)
        {
            if(nums[i] > maxValue)
            {                
                maxValue = nums[i]; 
                dominantIndex = i;
            } 
        }
        
        for(int i = 0; i < nums.Length; i++)
        {
            if(i != dominantIndex && 2*nums[i] > maxValue)
            {                
                return -1;
            } 
        }

        return dominantIndex;
    }
}
