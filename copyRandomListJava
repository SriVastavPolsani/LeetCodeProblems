/*
// Definition for a Node.
class Node {
    int val;
    Node next;
    Node random;

    public Node(int val) {
        this.val = val;
        this.next = null;
        this.random = null;
    }
}
*/

class Solution {
    public Node copyRandomList(Node head) {
        if(head == null){
            return null;
        }
        
        HashMap<Node, Node> nodeMapping = new HashMap<>();
        
        Node copyHead = new Node(head.val);
        Node curr = copyHead;
        Node actualHead = head;
        
        while(head.next != null) {
            nodeMapping.put(head, curr);
            curr.next = new Node(head.next.val);
            head = head.next;
            curr = curr.next;
        }
        nodeMapping.put(head, curr);
        curr.next = null;
        
        curr = copyHead;
        head = actualHead;
        
        while(head != null){
            if(nodeMapping.containsKey(head.random)){
                curr.random = nodeMapping.get(head.random);
            }
            else{
                curr.random = null;
            }
            head = head.next;
            curr = curr.next;
        }
        
        return copyHead;
    }
}
