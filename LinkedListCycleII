/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode DetectCycle(ListNode head) {
        
        if(head == null)
            return null;
        
        ListNode fast = head;
        ListNode slow = head;
        ListNode intersection = new ListNode();
        
        
        while(slow.next != null && fast.next != null && fast.next.next != null)
        {
            slow = slow.next;
            fast = fast.next.next;
            
            if(slow == fast)
            {
                intersection = slow;
                break;
            }
                
        }
        
        if(intersection == null || intersection.next == null)
        {
            return null;
        }
        
        while(intersection != head)
        {
            intersection = intersection.next;
            head = head.next;
        }
        
        return head;
    }
}
