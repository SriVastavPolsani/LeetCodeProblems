/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode MergeTwoLists(ListNode l1, ListNode l2) {
        
        ListNode soln = new ListNode(-1); //Create out soln node with val -1. val won't matter as we will be                                                    returning next of this.
        ListNode dummyHeadSoln = soln; // As soln node will be changing through out we need a dummy copy of it.
        
        while(l1 != null && l2 !=null) //Compare the two and keep pointing to lesser val node.
        {
            if(l1.val < l2.val)
            {
                soln.next = l1;
                l1 = l1.next; //incrementing to compare the next node value in the list next time.
            }
            else
            {
                soln.next = l2;
                l2 = l2.next;
            }
            soln = soln.next; // Need to keep incrementing to point to next node from either lists
        }
        if(l1 != null) //IF any list has more remaining elements, just point to those.
            soln.next = l1;
        if(l2 != null)
            soln.next = l2;
        
        return dummyHeadSoln.next; //Need to use dummy head as soln node would only be consisting of last (few)
                                    //elements at this point.
        
    }
}
