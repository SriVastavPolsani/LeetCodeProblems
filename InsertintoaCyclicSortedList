/*
// Definition for a Node.
class Node {
    public int val;
    public Node next;

    public Node() {}

    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, Node _next) {
        val = _val;
        next = _next;
    }
};
*/

class Solution {
    public Node insert(Node head, int insertVal) {
        if(head == null){
            Node node = new Node(insertVal);
            node.next = node;
            return node;
        }
        
        Node max = head;
        
        while(max.next != head && max.val <= max.next.val){
            max = max.next;
        }
        
        Node min = max.next;
        
        if(insertVal >= max.val || insertVal <= min.val){
            Node insertValNode = new Node(insertVal);
            max.next = insertValNode;
            insertValNode.next = min;
        }
        else{                 
            Node curr = min;
            while(curr.next.val <= insertVal){
                curr = curr.next;
            }

            Node insertValNode = new Node(insertVal);
            Node next = curr.next;
            curr.next = insertValNode;
            insertValNode.next = next;
        }
        
        return head;
    }
}
