/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<TreeNode> generateTrees(int n) {
        List<TreeNode> allTrees = new LinkedList<TreeNode>();
        if(n == 0) {
            return allTrees;
        }
        
        return generateTreesHelper(1,n);
    }
    
    private List<TreeNode> generateTreesHelper(int start, int end) {
        List<TreeNode> allTrees = new LinkedList<TreeNode>();
        
        if(start > end) {
            allTrees.add(null);
            return allTrees;
        }
        
        for(int i = start; i <= end; i++) {
            
            List<TreeNode> leftTrees = generateTreesHelper(start, i-1);
            List<TreeNode> rightTrees = generateTreesHelper(i+1, end);
            
            for(TreeNode l : leftTrees) {
                for(TreeNode r : rightTrees) {
                    TreeNode currNode = new TreeNode(i);
                    currNode.left = l;
                    currNode.right = r;
                    allTrees.add(currNode);
                }
            }
        }
        return allTrees;
    }
}
