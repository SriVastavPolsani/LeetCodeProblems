/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isSymmetric(TreeNode root) {
        if(root == null)
            return false;
        
        Queue<TreeNode> leftTree = new LinkedList<TreeNode>();
        Queue<TreeNode> rightTree = new LinkedList<TreeNode>();
        
        leftTree.add(root.left);
        rightTree.add(root.right);
        
        while(!leftTree.isEmpty() && !rightTree.isEmpty()) {
            TreeNode leftTreeNode = leftTree.remove();
            TreeNode rightTreeNode = rightTree.remove();
            
            if((leftTreeNode == null && rightTreeNode != null) || (rightTreeNode == null && leftTreeNode != null)) {
                return false;
            }
            
            if(leftTreeNode != null){
            
            if(leftTreeNode.val != rightTreeNode.val)
                return false;
            
            leftTree.add(leftTreeNode.left);
            leftTree.add(leftTreeNode.right);
            
            rightTree.add(rightTreeNode.right);
            rightTree.add(rightTreeNode.left);
                
            }
            
        }
        
        return true;
        
    }
}
