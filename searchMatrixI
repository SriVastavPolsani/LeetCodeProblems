class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int noOfRows = matrix.length;
        int noOfcolumns = matrix[0].length;
        
        if(matrix == null || noOfRows == 0){
            return false;
        }
        
        int colLastIdx = noOfcolumns - 1;
        int rowLastIdx = noOfRows-1;
        
        if(target > matrix[rowLastIdx][colLastIdx]){
            return false;
        }
        
        for(int i = 0; i < noOfRows; i++){
            if(target <= matrix[i][colLastIdx]){
                return searchHelper(matrix, i, colLastIdx, target);
            }
        }
        
        return false;
    }
    
    private boolean searchHelper(int[][] matrix, int row, int maxIdx, int target){
        int startIdx = 0;
        
        if(target == matrix[row][startIdx] || target == matrix[row][maxIdx]){
            return true;
        }
        
        int left = startIdx;
        int right = maxIdx;
        
        while(left <= right){
            int mid = left + ((right-left)/2);
            if(matrix[row][mid] == target){
                return true;
            }
            else if(matrix[row][mid] > target){
                right = mid-1;
            }
            else{
                left = mid+1;
            }
        }
        
        return false;
    }
}
