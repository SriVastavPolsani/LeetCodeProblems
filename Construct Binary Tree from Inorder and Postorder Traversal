/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        return helper(postorder.length - 1, 0, inorder.length - 1, inorder, postorder );
    }
    
    public TreeNode helper(int postIndex, int inStartIndex, int inEndIndex, int[] inorder, int[] postorder ) {
        if(postIndex < 0 || postIndex > postorder.length -1 || inStartIndex > inEndIndex) {
            return null;
        }
        
        TreeNode root = new TreeNode(postorder[postIndex]);
        
        int inIndex = 0;
        for(int i = inStartIndex ; i <= inEndIndex; i++) {
            if(inorder[i] == root.val) {
                inIndex = i;
            }
        }
        
        root.left = helper(postIndex - (inEndIndex - inIndex) - 1 , inStartIndex, inIndex - 1, inorder, postorder);
        root.right = helper(postIndex -1, inIndex + 1, inEndIndex, inorder, postorder);
        
        return root;
    }
}
