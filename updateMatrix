class Solution {
    public int[][] updateMatrix(int[][] mat) {
        
        if(mat == null || mat.length == 0) {
            return null;
        }
        
        int m = mat.length;
        int n = mat[0].length;
        Queue<int[]> queue = new LinkedList<>();
        boolean[][] visited = new boolean[m][n];
        
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(mat[i][j] == 0) {
                    queue.offer(new int[]{i,j});
                    visited[i][j] = true;
                }
            }
        }
        
        int[][] directions = new int[][]{{0,1},{1,0},{0,-1},{-1,0}};
        
        while(!queue.isEmpty()) {
            int qSize = queue.size();
            for(int i = 0; i < qSize; i++) {
                int[] curr = queue.poll();
                int currX = curr[0];
                int currY = curr[1];
                
                for(int[] dir : directions) {
                    int updatedX = currX + dir[0];
                    int updatedY = currY + dir[1];
                    
                    if(updatedX < 0 || updatedX > m-1 || updatedY < 0 || updatedY > n-1 || visited[updatedX][updatedY]) {
                        continue;
                    }
                    
                    mat[updatedX][updatedY] = mat[currX][currY] + 1;
                    queue.offer(new int[]{updatedX,updatedY});
                    visited[updatedX][updatedY] = true;
                }
            }
        }
        return mat;
    }
}
