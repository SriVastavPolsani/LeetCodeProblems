class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> output = new ArrayList<>();
        if(nums == null || nums.length == 0){
            return output;
        }
        
        boolean[] used = new boolean[nums.length];
        List<Integer> permutation = new ArrayList<>();
        backtrack(nums, output, used, permutation);
        return output;
    }
    
    private void backtrack(int[] nums, List<List<Integer>> output, boolean[] used, List<Integer> permutation){
        if(permutation.size() == nums.length){
            output.add(new ArrayList<>(permutation));
            return;
        }
        
        for(int i = 0; i < nums.length; i++){
            if(!used[i]){
                permutation.add(nums[i]);
                used[i] = true;
                backtrack(nums, output, used, permutation);
                used[i] = false;
                permutation.remove(permutation.size()-1);
            }
        }
    }
}
