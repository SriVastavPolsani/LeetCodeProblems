class Solution {
    public int numIslands(char[][] grid) {
        if(grid == null || grid.length == 0) {
            return 0;
        }
        
        int numOfIslands = 0;
        int nr = grid.length;
        int nc = grid[0].length;
        
        for(int r = 0; r < nr; r++) {
            for(int c = 0; c < nc; c++) {
                if(grid[r][c] == '1') {
                    numOfIslands++;
                    grid[r][c] = '0';
                    
                    Queue<Integer> neighbors = new LinkedList<Integer>();
                    neighbors.add(r*nc+c);
                    
                    while(!neighbors.isEmpty()){
                        int id = neighbors.remove();
                        
                        int row = id/nc;
                        int column = id%nc;
                        
                        if(row-1 >= 0 && grid[row-1][column] == '1') {
                            neighbors.add((row-1) * nc + column);
                            grid[row-1][column] = 0;
                        }
                        
                        if(row+1 < nr && grid[row+1][column] == '1') {
                            neighbors.add((row+1) * nc + column);
                            grid[row+1][column] = 0;
                        }
                        
                        if(column-1 >= 0 && grid[row][column-1] == '1') {
                            neighbors.add((row) * nc + (column-1));
                            grid[row][column-1] = 0;
                        }
                        
                        if(column+1 < nc && grid[row][column+1] == '1') {
                            neighbors.add((row) * nc + (column+1));
                            grid[row][column+1] = 0;
                        }
                    }
                }
            }
        }
        return numOfIslands;
    }
}
