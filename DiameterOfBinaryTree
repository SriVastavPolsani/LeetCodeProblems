/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    public int DiameterOfBinaryTree(TreeNode root) {
        if(root == null)
            return 0;
        
        int leftHeight = heightOfBinaryTree(root.left);
        int rightHeight = heightOfBinaryTree(root.right);
        
        return Math.Max(leftHeight+rightHeight, Math.Max(DiameterOfBinaryTree(root.left), DiameterOfBinaryTree(root.right)));
    }
    
    public int heightOfBinaryTree(TreeNode node)
    {
        if(node == null)
            return 0;
        
        int leftHeight = heightOfBinaryTree(node.left);
        int rightHeight = heightOfBinaryTree(node.right);
        
        if(leftHeight < rightHeight)
            return rightHeight + 1;
        else
            return leftHeight + 1;
    }
}
