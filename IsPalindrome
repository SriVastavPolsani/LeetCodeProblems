/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int val=0, ListNode next=null) {
 *         this.val = val;
 *         this.next = next;
 *     }
 * }
 */
public class Solution {
    public bool IsPalindrome(ListNode head) {
        List<int> convertedList = new List<int>();
        while(head != null)
        {
            convertedList.Add(head.val);
            head = head.next;
        }
        
        int low = 0;
        int high = convertedList.Count - 1;
        
        while(low < high)
        {
            if(convertedList[low] != convertedList[high])
            {
                return false;
            }
            low++;
            high--;
        }
        return true;
    }
}

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public boolean isPalindrome(ListNode head) {
        ListNode fast = head;
        ListNode slow = head;
        
        while(fast != null && fast.next != null)
        {
            fast = fast.next.next;
            slow = slow.next;
        }
        
        slow = reverse(slow);
        fast = head;
        
        while(slow != null)
        {
            if(slow.val != fast.val)
                return false;
            
            fast = fast.next;
            slow = slow.next;
        }
        
        return true;
    }
    
    public ListNode reverse(ListNode head)
    {
        ListNode prev = null;
        ListNode next = null;
        
        while(head != null)
        {
            next = head.next;
            head.next = prev;
            prev = head;
            head = next;
        }
        
        return prev;
    }
}
