public class Solution {
    public int Search(int[] nums, int target) {
        if(nums == null || nums.Length == 0)
            return -1;
        //Search for Pivot
        int lastElement = Int32.MinValue;
        int pivotIndex = 0;
        for(int i = 0; i < nums.Length; i++)
        {
            if(nums[i] < lastElement)
            {
                pivotIndex = i;
                break;
            }
            else
                lastElement = nums[i];
        }
        
        int lowFirst = 0;
        int highFirst = pivotIndex-1 < 0 ? pivotIndex : pivotIndex-1;
        
        int lowSecond = pivotIndex;
        int highSecond = nums.Length-1;
        
        if(nums[lowFirst] <= target && target <= nums[highFirst])
        {
            return BS(nums, lowFirst, highFirst , target);            
        }
        else
        {
            return BS(nums, lowSecond, highSecond, target);            
        }
    }
    
    public int BS(int[] nums, int low, int high , int target)
    {
        while(low <= high)
        {
            int mid = low + (high-low)/2;
            if(nums[mid] == target)
                return mid;
            else if(nums[mid] > target)
                high = mid -1;
            else
                low = mid + 1;
        }
        return -1;
    }
}
