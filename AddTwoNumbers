/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode AddTwoNumbers(ListNode l1, ListNode l2) {
        ListNode soln = new ListNode(-1); //best way to store a soln for LL
        ListNode dummyHeadSoln = soln; //this helps return dummy.next for final soln.
        
        int lOneData = 0; //intitalize everything you would need for elementary addition.
        int ltwoData = 0;
        
        int sum = 0;
        int value = 0;
        int carry = 0;
        
        while(l1 != null || l2 != null)
        {
            lOneData = (l1 == null) ? 0 : l1.val; //This will handle one LL being longer than other using 0 when                                                    shorter list has no elem.
            ltwoData = (l2 == null) ? 0 : l2.val;
            
            sum = lOneData + ltwoData + carry; //Basic elementary addition formula
            
            value = sum%10;  //to handle 2 digit values (carry the extra stuff)
            carry = sum/10;
            
            soln.next = new ListNode(value); 
            
            if(l1 != null) l1 = l1.next; //null.next doesn't exist, when list ends just keep using 0.
            if(l2 != null) l2 = l2.next;
            
            soln = soln.next;            
        }
        
        if(carry != 0)
            soln.next = new ListNode(carry); //If there is extra carry. point to that.
        
        return dummyHeadSoln.next;
    }
}
