public class Solution {
//Binary Search Solution
    public int[] Intersection(int[] nums1, int[] nums2) {
        List<int> intersectionList = new List<int>();
        
        Array.Sort(nums1);
        Array.Sort(nums2);
        
        int[] swapHelper = new int[nums2.Length];
        
        if(nums1.Length > nums2.Length)
        {
            swapHelper = nums2;
            nums2 = nums1;
            nums1 = swapHelper;
        }
        
        for(int i = 0; i < nums1.Length; i++)
        {
            int low = 0;
            int high = nums2.Length - 1;
            int mid = (low + high)/2;
            
            while(low <= high)
            {
                mid = (low + high)/2;
                if(nums2[mid] > nums1[i])
                {
                    high = mid - 1;
                }
                else if(nums2[mid] < nums1[i])
                {
                    low = mid + 1;
                }
                else
                {
                    if(!intersectionList.Contains(nums1[i]))
                    {
                        intersectionList.Add(nums1[i]);                        
                    }
                    break;
                }                    
            }
        }
        return intersectionList.ToArray();
    }
}

public class Solution {
    public int[] Intersection(int[] nums1, int[] nums2) {
        HashSet<int> nums1Set = new HashSet<int>(); //Set does not take in dups
        
        for(int i = 0; i < nums1.Length; i++)
        {
            nums1Set.Add(nums1[i]);
        }
        
        HashSet<int> intersectionSet = new HashSet<int>();
        
        for(int i = 0; i < nums2.Length; i++)
        {
            if(nums1Set.Contains(nums2[i]))
            {
                intersectionSet.Add(nums2[i]);                
            }
        }
        
        int[] intersectionArray = new int[intersectionSet.Count];
        intersectionSet.CopyTo(intersectionArray); //Mathod to convert to array from set.
        
        return intersectionArray;
    }
}
