/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode rotateRight(ListNode head, int k) {
        if(head == null){
            return null;
        }
        
        int listLength =  listNodeLength(head);
        
        int requiredK = k;
        
        if(listLength < k){
            requiredK = k%listLength;
        }
        
         ListNode rotatedNode = head;
         for(int i = 1; i <= requiredK; i++){
              rotatedNode = rotateHelper(rotatedNode);
         }
        return rotatedNode;
    }
    
    private ListNode rotateHelper(ListNode head){
        if(head == null || head.next == null){
            return head;
        }
        
        ListNode curr = head;
        
        while(curr.next.next != null){
            curr = curr.next;
        }
        
        ListNode preTail = curr;
        ListNode tail = curr.next;
        
        tail.next = head;
        preTail.next = null;
        
        return tail;
    } 
    
    private int listNodeLength(ListNode head) {
        int length = 0;
        
        while(head != null){
            length++;
            head = head.next;
        }
        
        return length;
    }
}
