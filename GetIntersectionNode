/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode GetIntersectionNode(ListNode headA, ListNode headB) {
        HashSet<ListNode> visitedNodes = new HashSet<ListNode>();
        
        while(headA != null)
        {   
            visitedNodes.Add(headA);       
            headA = headA.next;
        }
        
        while(headB != null)
        {          
            if(visitedNodes.Contains(headB))
            {
                return headB;
            }
            headB = headB.next;
        }
        
        return null;
     }
}

//Optimized O(1) space complexity
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode GetIntersectionNode(ListNode headA, ListNode headB) {
        ListNode ptrA = headA;
        ListNode ptrB = headB;
        
        if(headA == null || headB == null)
            return null;
        
        while(ptrA != ptrB){
            ptrA = ptrA.next;
            ptrB = ptrB.next;
            
            if(ptrA == ptrB)
            {
                return ptrA;
            }
            
            if(ptrA == null)
                ptrA = headB;
            
            if(ptrB == null)
                ptrB = headA;
        }
        
        return ptrA;
    }
}
